<?php

namespace dezmont765\yii2bundle\actions;

use dezmont765\yii2bundle\models\AParentActiveRecord;
use Yii;
use yii\db\ActiveRecord;

/**
 * Created by PhpStorm.
 * User: Dezmont
 * Date: 30.04.2017
 * Time: 14:47
 * @property AParentActiveRecord $child_models_parent_class
 * @property ActiveRecord $model
 */
abstract class SingleDynamicFieldsAction extends DynamicFieldsAction
{


    public $category = null;
    public $child_models_sub_class = null;

    public $child_models = [];


    public $binding_class = null;
    public $child_models_parent_class = null;
    public $child_binding_attribute = null;
    public $parent_binding_attribute = null;
    public $category_get_strategy = null;
    public $category_post_param = 'category';
    public $child_models_search_strategy = null;


    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
        $this->category = $this->getCategory($this->category_get_strategy,
                                             Yii::$app->request->getBodyParam($this->category_post_param));;
        if($this->category) {
            $this->child_models_sub_class = $this->getChildModelsSubClass($this->child_models_sub_class, $this->category,
                                                                          $this->child_models_parent_class);
        }
    }


    public function initModels() {
        $this->loadModelsFromRequest($this->child_models, $this->child_models_sub_class);
    }


    public function save() {
        if($this->model->load(Yii::$app->request->post())) {
            if($this->model->save()) {
                $this->saveSubModels($this->child_models, $this->category, $this->child_binding_attribute,
                                     $this->parent_binding_attribute);
                return $this->controller->redirect(['update', 'id' => $this->model->id]);
            }
        }
    }


    public function getBindingClass($binding_class, $sub_model_parent_class) {
        return $binding_class ?? $sub_model_parent_class;
    }


    public function findExistingSubModels() {
        $this->child_models =
            $this->findChildModels($this->child_models_search_strategy, $this->child_models_sub_class,
                                   $this->child_models_parent_class, $this->category, $this->child_binding_attribute,
                                   $this->parent_binding_attribute);
    }


}